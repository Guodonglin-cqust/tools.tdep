#! /usr/bin/env python3

from pathlib import Path
from typing import List

import typer
from ase.io import read

outfile_meta = "infile.meta"
outfile_stat = "infile.stat"
outfile_forces = "infile.forces"
outfile_positions = "infile.positions"


def main(files: List[Path], format: str = "aims-output"):
    typer.echo(files)

    typer.echo(f"Parse {len(files)} file(s)")

    with open(outfile_forces, "w") as ff, open(outfile_positions, "w") as fp:
        for ii, file in enumerate(files):
            typer.echo(f".. parse file {ii:3d}: {str(file)}")
            atoms = read(file, format=format)
            print(f"Write pos, force for atom {ii}")
            positions = atoms.get_scaled_positions()
            forces = atoms.get_forces()
            for (pos, force) in zip(positions, forces):
                (px, py, pz) = pos
                (fx, fy, fz) = force
                fp.write(f"{px:23.15e} {py:23.15e} {pz:23.15e}\n")
                ff.write(f"{fx:23.15e} {fy:23.15e} {fz:23.15e}\n")

        n_steps = len(files)
        n_atoms = len(atoms)

    typer.echo(f".. forces written to {outfile_forces}")
    typer.echo(f".. positions written to {outfile_positions}")

    # Store Meta info:
    with open(outfile_meta, "w") as f:
        f.write(f"{n_atoms}     # N atoms\n")
        f.write(f"{n_steps}     # N timesteps\n")
        f.write(f"{1.0}         # timestep in fs (currently not used )\n")
        f.write(f"{30000}       # temperature in K (currently not used)\n")
    typer.echo(f".. meta info written to {outfile_meta}")

    with open(outfile_stat, "w") as f:
        for ii in range(n_atoms * n_steps):
            f.write("0 0 0 0 0 0 0 0 0 0 0 0 0\n")
    typer.echo(f".. stat. info written to {outfile_meta}")


if __name__ == "__main__":
    typer.run(main)
